<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="ccc-Utilities">
<refmeta>
<refentrytitle role="top_of_page">Utilities</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>CCC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Utilities</refname>
<refpurpose></refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



<link linkend="gboolean">gboolean</link>            <link linkend="cc-accumulator-boolean">cc_accumulator_boolean</link>              (<link linkend="GSignalInvocationHint">GSignalInvocationHint</link> *hint,
                                                         <link linkend="GValue">GValue</link> *return_accu,
                                                         <link linkend="GValue">GValue</link> const *handler_return,
                                                         <link linkend="gpointer">gpointer</link> data);
<link linkend="void">void</link>                <link linkend="cc-point-grid-align">cc_point_grid_align</link>                 (<link linkend="gdouble">gdouble</link> *x,
                                                         <link linkend="gdouble">gdouble</link> *y,
                                                         <link linkend="gdouble">gdouble</link> *width);
#define             <link linkend="cc-return-if-unimplemented">cc_return_if_unimplemented</link>          (klass, member)

</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="cc-accumulator-boolean" role="function"/>cc_accumulator_boolean ()</title>
<indexterm><primary>cc_accumulator_boolean</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            cc_accumulator_boolean              (<link linkend="GSignalInvocationHint">GSignalInvocationHint</link> *hint,
                                                         <link linkend="GValue">GValue</link> *return_accu,
                                                         <link linkend="GValue">GValue</link> const *handler_return,
                                                         <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Serves as a simple accumulator for signal emission. If you set
<link linkend="cc-accumulator-boolean"><function>cc_accumulator_boolean()</function></link> as the accumulator for a signal, the signal will
abort execution once a signal handler returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>hint</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GSignalInvocationHint"><type>GSignalInvocationHint</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>return_accu</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GValue"><type>GValue</type></link> for the emission
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handler_return</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GValue"><type>GValue</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> unused
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara><link linkend="FALSE:CAPS"><literal>FALSE</literal></link> to stop, <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> to continue.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cc-point-grid-align" role="function"/>cc_point_grid_align ()</title>
<indexterm><primary>cc_point_grid_align</primary></indexterm><programlisting><link linkend="void">void</link>                cc_point_grid_align                 (<link linkend="gdouble">gdouble</link> *x,
                                                         <link linkend="gdouble">gdouble</link> *y,
                                                         <link linkend="gdouble">gdouble</link> *width);</programlisting>
<para>
Rounds the coordinates <parameter>x</parameter> and <parameter>y</parameter>. Rounds <parameter>width</parameter> to the nearest integer, the
result of this conversion is needed for the other calculation.
</para>
<para>
If the rounded <parameter>width</parameter> is a multiple of 2.0, then <parameter>x</parameter> and <parameter>y</parameter> will be set to be
multiples of 1.0. They will be set to values of the form (x + 0.5)
otherwise.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> an x coordinate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> a y coordinate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>width</parameter>&nbsp;:</term>
<listitem><simpara> the width of a line
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cc-return-if-unimplemented" role="macro"/>cc_return_if_unimplemented()</title>
<indexterm><primary>cc_return_if_unimplemented</primary></indexterm><programlisting>#define             cc_return_if_unimplemented(klass, member)</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
