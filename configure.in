dnl Process this file with autoconf to produce a configure script.

AC_INIT(src/gcompris/gcompris.c)
AM_INIT_AUTOMAKE(gcompris, 5.1)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

AC_ISC_POSIX

GTK_REQUIRED=2.0.3
GDK_PIXBUF_REQUIRED=2.0.6
LIBGNOMECANVAS_REQUIRED=2.0.2

PKG_CHECK_MODULES(GCOMPRIS, gtk+-2.0 >= $GTK_REQUIRED gdk-pixbuf-2.0 >= $GDK_PIXBUF_REQUIRED libgnomecanvas-2.0 >= $LIBGNOMECANVAS_REQUIRED gthread-2.0 libassetml)
AC_SUBST(GCOMPRIS_CFLAGS)
AC_SUBST(GCOMPRIS_LIBS)

dnl gcompris-edit still require gnome
GCOMPRIS_EDIT_CFLAGS=
GCOMPRIS_EDIT_LIBS=
dnl By default, build gcompris-edit
GCOMPRIS_EDIT=yes
build_gcompris_edit=yes
AC_ARG_WITH(editor,
  AC_HELP_STRING(
    [--with-editor],
    [Tell configure to compile gcompris-edit (it requires gnome)]),
  [GCOMPRIS_EDIT=$withval] )

if test x$GCOMPRIS_EDIT = xno; then
  build_gcompris_edit=no
fi

dnl Finally output the required python variables and automake defines.
AM_CONDITIONAL(GCOMPRIS_EDIT, test x$build_gcompris_edit = xyes)

if test x$build_gcompris_edit = xno; then
  AC_MSG_NOTICE([gcompris-edit build is disabled.])
else
  dnl gcompris-edit is requested, so check for gnome
  LIBGNOME_REQUIRED=1.96.0
  LIBGNOMEUI_REQUIRED=1.96.0

  PKG_CHECK_MODULES(GCOMPRIS_EDIT, libgnome-2.0 >= $LIBGNOME_REQUIRED libgnomeui-2.0 >= $LIBGNOMEUI_REQUIRED)

  AC_SUBST(GCOMPRIS_EDIT_CFLAGS)
  AC_SUBST(GCOMPRIS_EDIT_LIBS)

fi

dnl For embedded ogg player
XIPH_PATH_OGG
XIPH_PATH_AO
XIPH_PATH_VORBIS

AC_HEADER_DIRENT

AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC

AC_PROG_INTLTOOL

AM_DISABLE_STATIC
AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL

dnl GNOME2 GNOME_X_CHECKS
AM_PATH_GLIB_2_0

dnl libxml-2 Checks
PKG_CHECK_MODULES(XML, libxml-2.0)
AC_SUBST(XML_CFLAGS)
AC_SUBST(XML_LIBS)

dnl glib-genmarshal
AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)

dnl popt
AC_CHECK_LIB(popt, poptDupArgv,,
AC_MSG_ERROR([You must have popt 1.5 or newer to compile gcompris.]))

AM_ICONV

dnl Add the languages which your application supports here.
ALL_LINGUAS="am ar az ca cs de el es fi fr he hi hr hu it lt mk ml ms nl no pl pt pt_BR ro ru sk sl sr sr@Latn sv tr"

dnl GCompris needs to know which locale are supported
AC_SUBST(ALL_LINGUAS)
AC_DEFINE_UNQUOTED(ALL_LINGUAS, "${ALL_LINGUAS}", [Supported languages])

GETTEXT_PACKAGE=gcompris
AC_SUBST(GETTEXT_PACKAGE)
AM_GLIB_GNU_GETTEXT
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [Gettext package name])

dnl Define myprefix depending on wether our user gives us one or not
if test "x${prefix}" = "xNONE"; then
  myprefix=${ac_default_prefix}
else
  myprefix=${prefix}
fi

dnl Set PACKAGE_LOCALE_DIR in config.h.
AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${myprefix}/${DATADIRNAME}/locale", [Gcompris locale directory])

dnl Set PACKAGE_SOUNDS_DIR
PACKAGE_SOUNDS_DIR="sounds"
AC_SUBST(PACKAGE_SOUNDS_DIR)
AC_DEFINE_UNQUOTED(PACKAGE_SOUNDS_DIR, "${myprefix}/${DATADIRNAME}/${PACKAGE}/sounds", [Gcompris sounds directory])

dnl Set PACKAGE_DATA_DIR
PACKAGE_DATA_DIR="boards"
AC_SUBST(PACKAGE_DATA_DIR)
AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${myprefix}/${DATADIRNAME}/${PACKAGE}/boards", [Gcompris data directory])

dnl Set PACKAGE_HELP_DIR
AC_DEFINE_UNQUOTED(PACKAGE_HELP_DIR, "${myprefix}/${DATADIRNAME}/gnome/help/${PACKAGE}", [Gcompris help directory])
PACKAGE_HELP_DIR="${myprefix}/${DATADIRNAME}/gnome/help/${PACKAGE}"
AC_SUBST(PACKAGE_HELP_DIR)

dnl Plugin Directory
AC_DEFINE_UNQUOTED(PLUGIN_DIR, "${myprefix}/lib/gcompris", [Gcompris plugins directory])

AC_DEFINE_UNQUOTED(GNOME_ICONDIR, "${myprefix}/${DATADIRNAME}/pixmaps", [Gnome icons directory])

plugindir=$libdir/gcompris
AC_SUBST(plugindir)

dnl Test for gnuchess
AC_PATH_PROG(GNUCHESS, gnuchess,no,[/usr/bin:/usr/games:/usr/local/bin])

if test x$GNUCHESS = xno; then
  AC_MSG_ERROR(Couldn't find gnuchess, please install the gnuchess package version 5 or above)
fi
AC_DEFINE_UNQUOTED(GNUCHESS, "$GNUCHESS", Defines where GNU Chess resides on the system)

AC_PATH_PROG(TEXINFO, makeinfo,no)
if test x$TEXINFO = xno; then
  AC_MSG_ERROR(Couldn't find texinfo, please install the texinfo package)
fi

AC_PATH_PROG(TETEX, texi2html,no)
if test x$TETEX = xno; then
  AC_MSG_ERROR(Couldn't find texi2html usualy in the tetex package, please install it)
fi

dnl Tests for the python plugin
PYTHON_CFLAGS=
PYTHON_LIBS=
dnl By default, dont build python until we have something usefull to show
PYTHON_PATH=yes
build_python_plugin=yes
AC_ARG_WITH(python,
  AC_HELP_STRING(
    [--with-python=path],
    [Give the python interpreter (ex: /opt/python/bin/python2.2)]),
  [PYTHON_PATH=$withval] )

if test x$PYTHON_PATH = xno; then
  build_python_plugin=no
else
  dnl Find a python interpretter
  python_old_path=${PATH}
  if test x$PYTHON_PATH = xyes; then
    AC_PATH_PROG(python_exec, python, no)
    if test x$python_exec = xno; then
      build_python_plugin=no
      AC_MSG_WARN([Couldn't find python interpreter, python plugin disabled.])
    fi
  else
    if test -x "${PYTHON_PATH}"; then
      python_exec=${PYTHON_PATH}
    else
      build_python_plugin=no
      AC_MSG_WARN([Couldn't find python interpreter, python plugin disabled.])
    fi
  fi

  if test x$build_python_plugin = xyes; then
    python_version=`${python_exec} -c "import sys; print sys.version[[:3]]"`
    python_prefix=`${python_exec} -c "import sys; print sys.prefix"`
    python_exec_prefix=`${python_exec} -c "import sys; print sys.exec_prefix"`

    dnl Search for python's includes
    python_old_cppflags=${CPPFLAGS}
    CPPFLAGS="${CPPFLAGS} -I${python_prefix}/include/python${python_version}"
    AC_CHECK_HEADER(Python.h, 
                    PYTHON_CFLAGS="-I${python_prefix}/include/python${python_version}",
                    [ AC_MSG_WARN([Couldn't find python includes, python plugin disabled.])
                      build_python_plugin=no])
    CPPFLAGS=$python_old_cppflags
  fi
  if test x$build_python_plugin = xyes; then
    dnl Search for python's libs
    dnl Take the needed libraries into the lib/python/config/Makefile... (see dia config)
    python_makefile="${python_exec_prefix}/lib/python${python_version}/config/Makefile"
    if test -f "${python_makefile}"; then
    dnl extra required libs
      python_localmodlibs=`sed -n -e 's/^LOCALMODLIBS=\(.*\)/\1/p' $python_makefile`
      python_basemodlibs=`sed -n -e 's/^BASEMODLIBS=\(.*\)/\1/p' $python_makefile`
      python_other_libs=`sed -n -e 's/^LIBS=\(.*\)/\1/p' $python_makefile`
      python_libs_cflags=`sed -n -e 's/^LINKFORSHARED=\(.*\)/\1/p' $python_makefile`
      python_libs="${python_localmodlibs} ${python_basemodlibs} ${python_other_libs}"

      python_old_ldflags=${LDFLAGS}
      LDFLAGS="${LDFLAGS} ${python_libs_cflags} -L${python_exec_prefix}/lib/python${python_version}/config ${python_libs}"
      AC_CHECK_LIB(python${python_version}, 
                   Py_Initialize, 
                   PYTHON_LIBS="${python_libs_cflags} -L${python_exec_prefix}/lib/python${python_version}/config -lpython${python_version} ${python_libs}",
                   [ AC_MSG_WARN([Couldn't find python library, python plugin disabled.])
                     build_python_plugin=no ])  
      LDFLAGS=${python_old_ldflags}
    else
      AC_MSG_WARN([Couldn't find python library, python plugin disabled.])
      build_python_plugin=no
    fi
  fi
fi

dnl Finally output the required python variables and automake defines.
AM_CONDITIONAL(PYTHON_PLUGIN, test x$build_python_plugin = xyes)

AC_SUBST(PYTHON_CFLAGS)
AC_SUBST(PYTHON_LIBS)

REQUIRE_PYHTON=""
if test x$build_python_plugin = xno; then
  AC_MSG_NOTICE([Python plugin is disabled.])
else
  dnl Python interpreter is available so check for pygtk and gnome-python
  PKG_CHECK_MODULES(PYGTK, pygtk-2.0 gnome-python-2.0)	
  AC_SUBST(PYGTK_CFLAGS)
  AC_SUBST(PYGTK_LIBS)
  REQUIRE_PYTHON="python gnome-python gnome-python-canvas pygtk2.0"
fi

AC_SUBST(REQUIRE_PYTHON)

dnl For libassetml
ASSETML_DIR=assetml
AC_SUBST(ASSETML_DIR)
AC_DEFINE_UNQUOTED(ASSETML_DIR, "${myprefix}/${DATADIRNAME}/${ASSETML_DIR}", [Global assetml directory])

dnl assetml version management
VERSION_VOICES_ALPHABET_DE=1.0
AC_SUBST(VERSION_VOICES_ALPHABET_DE)

VERSION_VOICES_COLORS_DE=1.0
AC_SUBST(VERSION_VOICES_COLORS_DE)

VERSION_VOICES_GEOGRAPHY_DE=0.0
AC_SUBST(VERSION_VOICES_GEOGRAPHY_DE)

VERSION_VOICES_MISC_DE=1.0
AC_SUBST(VERSION_VOICES_MISC_DE)

VERSION_VOICES_ALPHABET_EN=1.0
AC_SUBST(VERSION_VOICES_ALPHABET_EN)

VERSION_VOICES_COLORS_EN=1.0
AC_SUBST(VERSION_VOICES_COLORS_EN)

VERSION_VOICES_GEOGRAPHY_EN=1.0
AC_SUBST(VERSION_VOICES_GEOGRAPHY_EN)

VERSION_VOICES_MISC_EN=1.0
AC_SUBST(VERSION_VOICES_MISC_EN)

VERSION_VOICES_ALPHABET_ES=1.0
AC_SUBST(VERSION_VOICES_ALPHABET_ES)

VERSION_VOICES_COLORS_ES=1.0
AC_SUBST(VERSION_VOICES_COLORS_ES)

VERSION_VOICES_GEOGRAPHY_ES=0.0
AC_SUBST(VERSION_VOICES_GEOGRAPHY_ES)

VERSION_VOICES_MISC_ES=1.0
AC_SUBST(VERSION_VOICES_MISC_ES)

VERSION_VOICES_ALPHABET_FR=1.0
AC_SUBST(VERSION_VOICES_ALPHABET_FR)

VERSION_VOICES_COLORS_FR=1.0
AC_SUBST(VERSION_VOICES_COLORS_FR)

VERSION_VOICES_GEOGRAPHY_FR=1.0
AC_SUBST(VERSION_VOICES_GEOGRAPHY_FR)

VERSION_VOICES_MISC_FR=1.0
AC_SUBST(VERSION_VOICES_MISC_FR)

VERSION_VOICES_ALPHABET_PT=1.0
AC_SUBST(VERSION_VOICES_ALPHABET_PT)

VERSION_VOICES_COLORS_PT=1.0
AC_SUBST(VERSION_VOICES_COLORS_PT)

VERSION_VOICES_GEOGRAPHY_PT=1.1
AC_SUBST(VERSION_VOICES_GEOGRAPHY_PT)

VERSION_VOICES_MISC_PT=1.1
AC_SUBST(VERSION_VOICES_MISC_PT)

VERSION_FLAGS=1.1
AC_SUBST(VERSION_FLAGS)


dnl Autoconf output
AC_OUTPUT([ gcompris.spec
Makefile
src/Makefile
src/gcompris/Makefile
src/boards/Makefile
src/boards/python/Makefile
src/boards/python/gcompris/Makefile
src/boards/python/gcompris/bonus/Makefile
src/boards/python/gcompris/score/Makefile
src/boards/python/gcompris/skin/Makefile
src/boards/python/gcompris/sound/Makefile
src/boards/python/gcompris/timer/Makefile
src/boards/python/gcompris/utils/Makefile
po/Makefile.in
docs/Makefile
docs/C/Makefile
docs/fr/Makefile
boards/Makefile
boards/advanced_colors/Makefile
boards/babymatch/Makefile
boards/babyshapes/Makefile
boards/doubleentry/Makefile
boards/flags/Makefile
boards/geography/Makefile
boards/imageid/Makefile
boards/imagename/Makefile
boards/missing_letter/Makefile
boards/paintings/Makefile
boards/read_colors/Makefile
boards/scales/Makefile
boards/sounds/Makefile
boards/sounds/de/Makefile
boards/sounds/de/alphabet/Makefile
boards/sounds/de/colors/Makefile
boards/sounds/de/geography/Makefile
boards/sounds/de/misc/Makefile
boards/sounds/en/Makefile
boards/sounds/en/alphabet/Makefile
boards/sounds/en/colors/Makefile
boards/sounds/en/geography/Makefile
boards/sounds/en/misc/Makefile
boards/sounds/es/Makefile
boards/sounds/es/alphabet/Makefile
boards/sounds/es/colors/Makefile
boards/sounds/es/geography/Makefile
boards/sounds/es/misc/Makefile
boards/sounds/fr/Makefile
boards/sounds/fr/alphabet/Makefile
boards/sounds/fr/colors/Makefile
boards/sounds/fr/geography/Makefile
boards/sounds/fr/misc/Makefile
boards/sounds/pt/Makefile
boards/sounds/pt/alphabet/Makefile
boards/sounds/pt/colors/Makefile
boards/sounds/pt/geography/Makefile
boards/sounds/pt/misc/Makefile
])

echo ""
echo "***************************************************"
echo ""
echo configure complete,
echo with options:
echo "python plugins = $build_python_plugin"
echo "gcompris edit  = $build_gcompris_edit"

if test -x "${OGG_LIBS}"; then
echo "OGG LIBS       = NOT DETECTED (install libogg-devel)"
else
echo "OGG LIBS       = FOUND"
fi

if test -x "${AO_LIBS}"; then
echo "AO LIBS        = NOT DETECTED (install libao-devel)"
else
echo "AO LIBS        = FOUND"
fi

if test -x "${VORBIS_LIBS}"; then
echo "VORBIS LIBS    = NOT DETECTED (install libvorbis-devel)"
else
echo "VORBIS LIBS    = FOUND"
fi

echo gcompris will be installed in ${prefix}
echo to compile and install in in another directory
echo type sh configure --prefix=/usr
echo
echo type \'make\' to compile gcompris
echo type \'make install\' to install it
