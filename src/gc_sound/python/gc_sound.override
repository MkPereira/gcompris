%%
headers
#include <Python.h>

#include "pygobject.h"  
#include <glib.h>
#include "gc-sound.h"

void py_gc_sound_add_constants(PyObject *module, const gchar *strip_prefix);
void py_gc_sound_register_classes(PyObject *d);

%%
modulename gc_sound
%%
import gobject.GObject as PyGObject_Type

%%
ignore-glob
  *_get_type
%%
override-slot GcSoundObject

/* ----------- GcSoundObject ----------- */

static PyObject *
_wrap_gc_sound_object_destroy(PyGObject *self)
{
    
    gc_sound_object_destroy(GC_SOUND_OBJECT(self->obj));

    PyObject_Del(self);    
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGcSoundObject_methods[] = {
    { "destroy", (PyCFunction)_wrap_gc_sound_object_destroy, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

static void
py_gc_sound_object_dealloc(PyGcSoundObject *self)
{
    /* object is destroyed when python release it */
    gc_sound_object_destroy(GC_SOUND_OBJECT(self->obj));

    PyObject_GC_Del((PyObject*) self);
}

PyTypeObject G_GNUC_INTERNAL PyGcSoundObject_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gc_sound.Object",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor))py_gc_sound_object_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGcSoundObject_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};
%%
override gc_sound_mixer_sdl_new
/* ----------- GcSoundMixerSdl ----------- */

static int
_wrap_gc_sound_mixer_sdl_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char* kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     ":gc_sound.MixerSdl.__init__",
                                     kwlist))
        return -1;

    pygobject_constructv(self, 0, NULL);
    if (!self->obj) {
        PyErr_SetString(
            PyExc_RuntimeError, 
            "could not create gc_sound.MixerSdl object");
        return -1;
    }
    g_object_ref(G_OBJECT(self->obj));
    return 0;
}
%%
override gc_sound_item_append_child  kwargs
static PyObject *
_wrap_gc_sound_item_append_child (PyGObject *self, PyObject *args,
			        PyObject *kwargs)
{
    GcSoundItem   *item;
    GObjectClass      *class;
    guint              pos;
    PyObject          *value;
    PyObject          *key;
    GType              type;

    if (!PyArg_ParseTuple (args, ":gc_sound.item.append_child")) {
	return NULL;
    }

    item = gc_sound_item_append_child(GC_SOUND_ITEM(self->obj), NULL);

    if (!item) {
	PyErr_SetString (PyExc_RuntimeError,
			 "could not create GcSoundItem object");
	return NULL;
    }

    type =  GC_TYPE_SOUND_ITEM;

    class = G_OBJECT_GET_CLASS(item);
    g_object_freeze_notify (G_OBJECT(item));
    pos = 0;
    /* For each keyword ... */
    while (kwargs && PyDict_Next (kwargs, (int *) &pos, &key, &value)) {
	gchar *key_str = PyString_AsString (key);
	g_warning("kwargs %s", key_str);
	GParamSpec *pspec;
	GValue gvalue ={ 0, };

	pspec = g_object_class_find_property (class, key_str);
	if (!pspec) {
	    gchar buf[512];

	    g_snprintf(buf, sizeof(buf),
		       "canvas item `%s' doesn't support property `%s'",
		       g_type_name(type), key_str);
	    PyErr_SetString(PyExc_TypeError, buf);
	    gc_sound_object_destroy(GC_SOUND_OBJECT(item));
	    return NULL;
	}

	g_value_init(&gvalue, G_PARAM_SPEC_VALUE_TYPE(pspec));
	if (pyg_value_from_pyobject(&gvalue, value)) {
	    gchar buf[512];

	    g_snprintf(buf, sizeof(buf),
		       "could not convert value for property `%s'", key_str);
	    PyErr_SetString(PyExc_TypeError, buf);
	    gc_sound_object_destroy(GC_SOUND_OBJECT(item));
	    return NULL;
	}
	g_object_set_property(G_OBJECT(item), key_str, &gvalue);
	g_value_unset(&gvalue);
    }

    g_object_thaw_notify (G_OBJECT(item));

    return pygobject_new ((GObject *)item);
    

}
	
