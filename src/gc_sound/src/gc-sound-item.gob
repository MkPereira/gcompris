%alltop{/* gcompris - gc-sound-item.gob
 *
 * Copyright (C) 2006 Yves Combe
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
%}

requires 2.0.0

%h{
#ifndef __TYPEDEF_GC_SOUND_CHANNEL__
#define __TYPEDEF_GC_SOUND_CHANNEL__
typedef struct _GCSoundChannel GCSoundChannel;
#endif
%}

%{
#include <gc-sound-item.h>
#include <SDL.h>
#include <SDL_thread.h>
#include <SDL_mixer.h>
#include <SDL_audio.h>
#include <libintl.h>

#define _(String) gettext (String)
#define gettext_noop(String) String

#ifndef N_
#define N_(String) gettext_noop (String)
#endif

#include "gc-sound-item-private.h"

#include "gc-sound-channel.h"
%}

class GC:Sound:Item from G:Object {
  private GC:Sound:Channel *channel = { NULL }
  destroywith g_object_unref ;  

  property OBJECT channel
     ( nick=_("Channel playing for us"),
        blurb=_("Numero of channel"),
        object_type=GC:Sound:Channel,
        export, link );

  private GC:Sound:Item *parent = { NULL }
  destroywith g_object_unref ;  

  property OBJECT parent
     ( nick=_("Channel playing for us"),
        blurb=_("Numero of channel"),
        object_type=GC:Sound:Item,
        export, link );

  private gchar *filename = { NULL }
  destroywith g_free;

  property STRING filename
     ( nick=_("Filename of sound"),
        blurb=_("sound file to play"),
        export, link );

  public GC:Sound:Item *playing = { NULL }
  unrefwith g_object_unref;

  private G:List *SoundItems = { NULL }
  destroy {
    GList *list;

    for (list = SoundItems; list != NULL; list = list->next)
         g_object_unref(G_OBJECT(list->data));

    g_list_free (SoundItems);
  };

  private GList *PlayList = { NULL }
  destroy {
    GList *list;

    for (list = PlayList; list != NULL; list = list->next)
         g_object_unref(G_OBJECT(list->data));

    g_list_free (PlayList);
  };

  init (self)  {
    g_warning("Item sound instance init");
  }

  class_init (class) {
     g_warning("item sound class init");

  }

  public GC:Sound:Item *
    new (GC:Sound:Item *parent)
    {
      return GC_SOUND_ITEM(g_object_new(gc_sound_item_get_type(), "parent", parent, "channel", parent->_priv->channel, NULL));
    }

  public gboolean
    play (self, int volume)
     {
        if (self->_priv->filename != NULL) {
           gc_sound_channel_real_play(self->_priv->channel, self, volume);	
         }
     }

  signal first NONE (NONE)
     void play_finished (self)
  {
    g_warning ("Item sound %s has emit play_finished signal", self->_priv->filename);
  }
     
}
